// TODO - update to use describe/it and expectations, etc etc
//        just using as a placeholder to get ASYNC test running

#include "Waterchip_v2.h"

#include "sfall/lib.arrays.h"

#define print(text) debug_msg("Waterchip [print] " + text)

variable signal_ran = false;
variable signal_ran2 = false;

procedure run_via_signal begin
    print("SIGNAL RUN!!!!!!!!!!!!!!!!!!!!");
    signal_ran = 69;
end

procedure run_via_signal2 begin
    print("SIGNAL 2222 RUN!!!!!!!!!!!!!!!!!!!!");
    signal_ran2 = 69;
end

define_tests_proc(just_some_tests) begin

    define_async_test("an async test") begin
        define_async_test_step begin
            print("Hi from FIRST step of async test, signal_ran: " + signal_ran);
            SignalNamed("RunThisSignalInTest");
            print("We will now WAIT until the signal is run, signal_ran: " + signal_ran);
        end
        define_async_test_wait_step(signal_ran); // ... add ability to wait() with a number of ticks that it'll wait...
        define_async_test_step begin
            print("Step AFTER the waiting!!! signal was run???? " + signal_ran);
        end
    end

    define_async_test("2222 a DIFFERENT async test") begin
        define_async_test_step begin
            print("2222 Hi from FIRST step of async test, signal_ran: " + signal_ran);
            SignalNamed("RunThisSignalInTest2");
            print("22222 We will now WAIT until the signal is run, signal_ran: " + signal_ran);
        end
        define_async_test_wait_step(signal_ran2); // ... add ability to wait() with a number of ticks that it'll wait...
        define_async_test_step begin
            print("2222 Step AFTER the waiting!!! signal was run???? " + signal_ran);
        end
    end

end

variable timed_runs = 0;

procedure timed_event_p_proc begin
    timed_runs++;
    if timed_runs > 20 then begin
        print("MAX ITERATIONS - STOPPING!");
        return;
    end

    variable data = __waterchip_data;
    variable currently_running_test_index = data.test_run.currently_running_test_index;

    if currently_running_test_index > -1 then begin
        variable t = data.test_suites["Just Some Tests"].tests[currently_running_test_index];
        print(debug_array_str(t.__async_info));
        if not t.async or t.__async_info.current_step == t.__async_info.steps_completed then
            data.test_run.currently_running_test_index++;
    end else
        data.test_run.currently_running_test_index++;

    variable test_index = data.test_run.currently_running_test_index;
    print("Running: " + test_index);

    variable test_count = len_array(data.test_suites["Just Some Tests"].tests); // TODO make test_suites an array

    if test_index < test_count then begin
        print("=====================================================================");
        print("Test exists...");
        variable test = data.test_suites["Just Some Tests"].tests[test_index];
        print("Test to run: " + test.name);
        invoke_define_tests_proc("Just Some Tests", just_some_tests, test);

        print("TEST INDEX:" + test_index + " TEST_COUNT:" + test_count);

        add_global_timer_event(1, 0); // if there are any more ...
    end else
        print("DONE!");
end

procedure test_runner_to_remove_and_put_into_framework begin
    // TODO support multiple test suites

    variable data = __waterchip_data;

    variable test_run = { "currently_running_test_index": -1 };
    fix_array(test_run);
    data.test_run = test_run;

    add_global_timer_event(0, 0);
end

procedure start begin
    AddNamedHandler("RunThisSignalInTest", run_via_signal);
    AddNamedHandler("RunThisSignalInTest2", run_via_signal2);

    // Load the tests!
    invoke_define_tests_proc("Just Some Tests", just_some_tests, false);

    // Run the whole test suite! Begin the runner!
    display_msg("THE TESTS: " + __waterchip_data);
    call test_runner_to_remove_and_put_into_framework;
end
