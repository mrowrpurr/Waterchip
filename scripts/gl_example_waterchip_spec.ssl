#define DEBUG_NAME "ExampleSpec"
#include "FormattedDebug.h"
#include "sfall/sfall.h"
#include "sfall/lib.arrays.h"
/////////////////////////////



#include "Waterchip.h"

variable test_initialization_complete = false;

variable test_suite_data;

variable currently_running_test_name;

variable is_running_tests;

variable times_run_tests = 0;

variable test_suite_name = "describe name here";

procedure start;

procedure start begin
    debug("------------- start begin --------------");
    debug1f("========[ %s ]=======", currently_running_test_name);
    /////////////////////

    if currently_running_test_name then begin
        debug3("", test_suite_name, currently_running_test_name, "SETUP");
    end

    // Register a test
    // If the test has ALREADY been registered then it's time to RUN everything, yo.
    if (not is_running_tests) and test_initialization_complete and scan_array(test_suite_data.test_names, "this test") > -1 and times_run_tests == 0 then begin
        set_global_script_repeat(0); // turn it off!
        times_run_tests++; // extra protection from multiple invocations
        is_running_tests = true;
        debug("~~~~~~~~~~~~~~~~~~~~~~~");
        debug1("running all tests in suite", test_suite_name);
        foreach currently_running_test_name in (test_suite_data.test_names) begin
            debug2("run test from loop", test_suite_name, currently_running_test_name);
            call start;
        end
        debug("~~~~~~~~~~~~~~~~~~~~~~~");
        debug("~~~~~~~~~~~ DONE RUNNING TESTS ~~~~~~~~~~~~");
        return;
    end
    if not waterchip_data then waterchip_data = __waterchip_data;
    if not test_suite_data then begin
        test_suite_data = {};
        fix_array(test_suite_data);
        waterchip_data[test_suite_name] = test_suite_data;
        test_suite_data.test_names = [];
        fix_array(test_suite_data.test_names);
        test_suite_data.test_results = {};
        fix_array(test_suite_data.test_results);
    end
    if scan_array(test_suite_data.test_names, "this test") == -1 then begin
        debug2("REGISTER test", test_suite_name, "this test");
        call array_push(test_suite_data.test_names, "this test");
        set_global_script_repeat(1); // Run in 1 frame
        test_initialization_complete = true;
    end else if is_running_tests and currently_running_test_name == "this test" then begin
        debug2("RUN test", test_suite_name, "this test");
    end

    // Register a test
    // If the test has ALREADY been registered then it's time to RUN everything, yo.
    if (not is_running_tests) and test_initialization_complete and scan_array(test_suite_data.test_names, "another test") > -1 and times_run_tests == 0 then begin
        set_global_script_repeat(0); // turn it off!
        times_run_tests++; // extra protection from multiple invocations
        is_running_tests = true;
        debug("~~~~~~~~~~~~~~~~~~~~~~~");
        debug1("running all tests in suite", test_suite_name);
        foreach currently_running_test_name in (test_suite_data.test_names) begin
            debug2("run test from loop", test_suite_name, currently_running_test_name);
            call start;
        end
        debug("~~~~~~~~~~~~~~~~~~~~~~~");
        debug("~~~~~~~~~~~ DONE RUNNING TESTS ~~~~~~~~~~~~");
        return;
    end
    if not waterchip_data then waterchip_data = __waterchip_data;
    if not test_suite_data then begin
        test_suite_data = {};
        fix_array(test_suite_data);
        waterchip_data[test_suite_name] = test_suite_data;
        test_suite_data.test_names = [];
        fix_array(test_suite_data.test_names);
        test_suite_data.test_results = {};
        fix_array(test_suite_data.test_results);
    end
    if scan_array(test_suite_data.test_names, "another test") == -1 then begin
        debug2("REGISTER test", test_suite_name, "another test");
        call array_push(test_suite_data.test_names, "another test");
        set_global_script_repeat(1); // Run in 1 frame
        test_initialization_complete = true;
    end else if is_running_tests and currently_running_test_name == "another test" then begin
        debug2("RUN test", test_suite_name, "another test");
    end



    if currently_running_test_name then begin
        debug3("", test_suite_name, currently_running_test_name, "TEARDOWN");
    end

    /////////////////////
    debug1f("========[ %s ]=======", currently_running_test_name);
    debug("------------- start end --------------");
end